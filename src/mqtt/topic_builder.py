from enum import Enum, auto
from pydantic import GetCoreSchemaHandler
from pydantic_core import CoreSchema, core_schema
from typing import Any


class TopicType(Enum):
    SUBSCRIBER = auto()
    PUBLISHER = auto()


class Topic:
    __list: list[str] = []
    __topic_type: TopicType = None

    def __init__(self, topic_type: TopicType) -> None:
        """
        Initializes a `Topic` class object by setting its `__topic_type` attribute
        to a given value and creating an empty list called `__list`.

        Args:
            topic_type (TopicType): type of documentation to be generated by the
                function, such as code or concept, and influences the output
                structure and content.

        """
        self.__topic_type = topic_type
        self.__list = list()
        pass

    def add(self, value: str):
        """
        Adds the given value to a list referred to by the instance variable `__list`.
        It returns the modified instance, allowing for chaining of method calls.

        Args:
            value (str): value to be added to the list returned by the function.

        Returns:
            list: a reference to the same object instance.

        """
        self.__list.append(value)
        return self

    def pop(self):
        """
        Removes the last element from a list.

        Returns:
            instance of `Node: the popped element from the list.
            
            		- If no arguments are passed to `pop`, it removes the last item from
            the list and returns it.
            		- If one or more arguments are passed, it removes and returns a
            single item from the list based on the provided index(es).

        """
        self.__list.pop()
        return self

    def add_single_level(self):
        """
        Updates a list with a new string by concatenating it with the previous
        content using the plus operator, and then raises an error if the topic
        type is publisher.

        Returns:
            str: a list with a concatenated string and a plus sign at the end.

        """
        if self.__topic_type == TopicType.PUBLISHER:
            raise RuntimeError("Wildcards are not allowed in publisher topic")
        self.__list += "+"
        return self

    def add_multi_level(self):
        """
        Allows the addition of multiple level wildcard topics to a list, with the
        exception of publisher topics. The function appends a `#` symbol to the
        list and raises a runtime error for publisher topics.

        Returns:
            str: a new list with a # character appended, indicating that wildcards
            are not allowed in publisher topics.

        """
        if self.__topic_type == TopicType.PUBLISHER:
            raise RuntimeError("Wildcards are not allowed in publisher topic")
        self.__list += "#"
        return self

    def build(self) -> str:
        """
        Concatenates the elements of an iterable list `self.__list` separated by
        a `/`. It returns the resulting string.

        Returns:
            str: a concatenation of the elements of the `self._list` list, separated
            by slashes.

        """
        temp: str = ""
        for x in self.__list:
            temp += x + "/"
        temp = temp[:-1]
        return temp

    @property
    def get_topic_type(self):
        """
        Returns a string representing the topic type for which it was designed
        based on its internal data.

        Returns:
            str: a string representation of the topic type."

        """
        return self.__topic_type

    def __str__(self) -> str:
        """
        Generates high-quality documentation for code based on the given code.

        Returns:
            str: a string representation of the code object.

        """
        return self.build()

    @classmethod
    def __get_pydantic_core_schema__(
        cls, source_type: Any, handler: GetCoreSchemaHandler
    ) -> CoreSchema:
        """
        Generates high-quality documentation for given code by providing a Pydantic
        schema based on the code's structure and methods, using the `json_schema`
        and `python_schema` arguments as inputs.

        Args:
            cls (instance of Topic class as indicated by its serialization method,
                which returns plain serializer function schema.): Python class of
                the serialized object.
                
                		- `json_schema`: A JSON schema dictionary defining the structure
                of the data in `cls`.
                		- `python_schema`: An instance of `pydantic.types.PythonType`
                representing the Python class of `cls`.
                		- `serialization`: A function that serializes the contents of
                `cls` to a string using the `plain_serializer_function_ser_schema`.
                
                	Note that the input `cls` may or may not need to be destructed
                depending on its structure and the requirements of the function.
            source_type (Any): type of data to be validated, specifically whether
                it is JSON or Python schema.
            handler (GetCoreSchemaHandler): Topic serialization method for generating
                high-quality documentation.

        Returns:
            CoreSchema: a Pydantic schema represented as a Python object.

        """
        return core_schema.json_or_python_schema(
            json_schema=core_schema.str_schema(),
            python_schema=core_schema.is_instance_schema(Topic),
            serialization=core_schema.plain_serializer_function_ser_schema(lambda c: c.build()),
        )
