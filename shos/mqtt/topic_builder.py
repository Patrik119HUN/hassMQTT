from enum import Enum, auto


class TopicType(Enum):
    SUBSCRIBER = auto()
    PUBLISHER = auto()


class Topic:
    __list: list[str] = []
    __topic_type: TopicType = None

    def __init__(self, topic_type: TopicType) -> None:
        """
        Initializes a `Topic` class object by setting its `__topic_type` attribute
        to a given value and creating an empty list called `__list`.

        Args:
            topic_type (TopicType): type of documentation to be generated by the
                function, such as code or concept, and influences the output
                structure and content.

        """
        self.__topic_type = topic_type
        self.__list = list()
        pass

    def add(self, value: str):
        self.__list.append(value)
        return self

    def add_single_level(self):
        """
        Updates a list with a new string by concatenating it with the previous
        content using the plus operator, and then raises an error if the topic
        type is publisher.

        Returns:
            str: a list with a concatenated string and a plus sign at the end.

        """
        if self.__topic_type == TopicType.PUBLISHER:
            raise RuntimeError("Wildcards are not allowed in publisher topic")
        self.__list += "+"
        return self

    def add_multi_level(self):
        """
        Allows the addition of multiple level wildcard topics to a list, with the
        exception of publisher topics. The function appends a `#` symbol to the
        list and raises a runtime error for publisher topics.

        Returns:
            str: a new list with a # character appended, indicating that wildcards
            are not allowed in publisher topics.

        """
        if self.__topic_type == TopicType.PUBLISHER:
            raise RuntimeError("Wildcards are not allowed in publisher topic")
        self.__list += "#"
        return self

    def build(self) -> str:
        """
        Concatenates the elements of an iterable list `self.__list` separated by
        a `/`. It returns the resulting string.

        Returns:
            str: a concatenation of the elements of the `self._list` list, separated
            by slashes.

        """
        temp: str = ""
        for x in self.__list:
            temp += x + "/"
        return temp

    @property
    def get_topic_type(self):
        return self.__topic_type

    def __str__(self) -> str:
        return self.build()
