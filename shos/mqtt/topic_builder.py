from enum import Enum, auto


class TopicType(Enum):
    SUBSCRIBER = auto()
    PUBLISHER = auto()


class Topic:
    __list: list[str] = []
    __topic_type: TopicType = None

    def __init__(self, topic_type: TopicType) -> None:
        """
        Initializes a `Topic` class object by setting its `__topic_type` attribute
        to a given value and creating an empty list called `__list`.

        Args:
            topic_type (TopicType): type of documentation to be generated by the
                function, such as code or concept, and influences the output
                structure and content.

        """
        self.__topic_type = topic_type
        self.__list = list()
        pass

    def add(self, value: str):
        """
        Appends the given value to a list stored in an instance attribute named `__list`.

        Args:
            value (str): element to be added to the list maintained by the instance
                of the class, and its addition is immediately returned as the same
                instance of the class for further method calls or other actions
                to be taken.

        Returns:
            instance of its own class, specifically an instance of the `Addition`
            class: a reference to itself, allowing for chaining calls to the function.
            
            		- The returned object is a reference to the same instance of the
            `list` class as the one on which the `add` method was called.
            		- The `append` method adds an element to the end of the list and
            returns the updated list.
            		- The method does not modify the original list.

        """
        self.__list.append(value)
        return self

    def add_single_level(self):
        """
        Updates a list with a new string by concatenating it with the previous
        content using the plus operator, and then raises an error if the topic
        type is publisher.

        Returns:
            str: a list with a concatenated string and a plus sign at the end.

        """
        if self.__topic_type == TopicType.PUBLISHER:
            raise RuntimeError("Wildcards are not allowed in publisher topic")
        self.__list += "+"
        return self

    def add_multi_level(self):
        """
        Allows the addition of multiple level wildcard topics to a list, with the
        exception of publisher topics. The function appends a `#` symbol to the
        list and raises a runtime error for publisher topics.

        Returns:
            str: a new list with a # character appended, indicating that wildcards
            are not allowed in publisher topics.

        """
        if self.__topic_type == TopicType.PUBLISHER:
            raise RuntimeError("Wildcards are not allowed in publisher topic")
        self.__list += "#"
        return self

    def build(self) -> str:
        """
        Concatenates the elements of an iterable list `self.__list` separated by
        a `/`. It returns the resulting string.

        Returns:
            str: a concatenation of the elements of the `self._list` list, separated
            by slashes.

        """
        temp: str = ""
        for x in self.__list:
            temp += x + "/"
        return temp

    @property
    def get_topic_type(self):
        """
        Returns the type of a topic based on its provided code.

        Returns:
            str: a string representing the topic type.

        """
        return self.__topic_type

    def __str__(self) -> str:
        """
        Generates high-quality documentation for code that is passed to it.

        Returns:
            str: a string representation of the object itself.

        """
        return self.build()
